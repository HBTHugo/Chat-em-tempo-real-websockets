pipeline {
    agent any

    stages {
        stage('Clone Repository') {
            steps {
                checkout([$class: 'GitSCM', 
                          branches: [[name: '*/main']], 
                          userRemoteConfigs: [[
                              url: 'https://github.com/SEU_USUARIO/NOME_DO_REPOSITORIO.git',
                              credentialsId: '01cc71e0-6736-4016-8247-117d39fb39b3'  // 
                          ]]])
            }
        }

        stage('Install Dependencies') {
            steps {
                script {
                    // Instala as dependências usando npm ou yarn
                    sh 'npm install'  // ou 'yarn install'
                }
            }
        }

        stage('Run Tests') {
            steps {
                script {
                    // Executa os testes
                    sh 'npm test'  // ou 'yarn test'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Constrói a imagem Docker
                    sh 'docker build -t nome-da-imagem .'
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    // Fazer o deploy da aplicação
                    // Por exemplo, você pode usar docker-compose ou kubectl aqui
                    sh 'docker run -d -p 3000:3000 nome-da-imagem'
                }
            }
        }
    }

    post {
        always {
            // Ações que devem ocorrer após a execução do pipeline
            archiveArtifacts artifacts: '**/test-results/**/*', allowEmptyArchive: true
            junit '**/test-results/**/*.xml' // Para relatórios de teste (JUnit ou outros formatos)
        }
        failure {
            script {
                // Em caso de falha, enviar um e-mail ou notificar
                echo "Pipeline falhou. Tome uma ação!"
            }
        }
    }
}

